<?php

require 'libraries/module_controller.php';
require 'models/block.php';
require 'models/field.php';
require 'models/area.php';

class FlexBlocks extends Process {

	const adminPageName = 'flexblocks';

	public static function getModuleInfo() {
		return array(
			'title' => 'FlexBlocks',
			'summary' => 'Manage "content blocks" and editable areas to allow for a more flexible and intuitve editing experience while maintaining markup control.',
			'version' => '052', // Module version number: use 1 for 0.0.1 or 100 for 1.0.0, and so on
			'author' => 'Jordan Lev',
			//'href' => 'http://modules.processwire.com/flexblocks',
			'permission' => 'template-admin',
			'icon' => 'language',
			'requires' => array('FieldtypePageTable', 'FieldtypeCache'),
		);
	}

	public function execute() {
		return ModuleController::execute($this, 'main');
	}

	public function executeBlocks() {
		return ModuleController::execute($this, 'blocks');
	}

	public function executeFields() {
		return ModuleController::execute($this, 'fields');
	}

	public function executeAreas() {
		return ModuleController::execute($this, 'areas');
	}

/*****************************************************************************/

	public function ___install() {
		//Attempt to create the dispatcher file and block template directory first,
		// so if it fails we can abort the rest of the process
		// (an exception will be thrown within the function if it fails).
		list($file_path, $dir) = FlexBlocksBlockModel::installBlockTemplateDispatcherAndDirectory();
		$this->message('Created file "' . $file_path . '" and directory "' . $dir . '" on the server for block templates');

		list($path, $title) = FlexBlocksBlockModel::installBlockInstanceContainerTemplateAndPage();
		$this->message('Created hidden page "' . $title . '" for block storage in the admin section at site path "' . $path . '"');

		$path = $this->installAdminPage();
		$this->message("Created admin management page: {$path}");
	}
	
	private function installAdminPage() {
		// create the page our module will be assigned to
		$page = new Page();
		$page->template = 'admin';
		$page->name = self::adminPageName;

		// installs to the admin "Setup" menu
		$page->parent = $this->pages->get($this->config->adminRootPageID)->child('name=setup');
		$page->process = $this;

		// make the page title the same as our module title
		$info = self::getModuleInfo();
		$page->title = $info['title'];

		// save the page
		$page->save();

		return $page->path;
	}

	public function ___uninstall() {
		FlexBlocksAreaModel::uninstallAllAreas();
		$this->message('Deleted all areas');

		FlexBlocksBlockModel::uninstallAllBlocksAndFields();
		$this->message('Deleted all blocks and their fields');

		list($path, $title) = FlexBlocksBlockModel::uninstallBlockInstanceContainerPageAndTemplate();
		$this->message('Deleted block storage page "' . $title . '" at site path "' . $path . '" from the admin section');

		$path = FlexBlocksBlockModel::uninstallBlockTemplateDispatcher(); //note that we leave the block templates intact (but the dispatcher file is generated code so it's ok for it to disappear).
		$this->message('Deleted block template dispatcher file "' . $path . '" from server');
		
		$path = $this->uninstallAdminPage();
		$this->message("Deleted admin management page: {$page->path}");
	}
	
	private function uninstallAdminPage() {
		//Find the page we installed, locating it by the process field (which has the module ID).
		//(It would probably be sufficient just to locate by name, but this is just to be extra sure.)
		$moduleID = $this->modules->getModuleID($this);
		$page = $this->pages->get("template=admin, process=$moduleID, name=" . self::adminPageName);

		$page_path = $page->path; //grab this now before page gets deleted so we can return it

		if($page->id) {
			// if we found the page, let the user know and delete it
			$page->delete();
		}

		return $page_path;
	}

}
